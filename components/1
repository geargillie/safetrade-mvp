'use client';

import React, { useState, useRef, useCallback } from 'react';

interface FreeIdentityVerificationProps {
  userId: string;
  onComplete: (result: any) => void;
  onError: (error: string) => void;
}

type VerificationStep = 'intro' | 'document' | 'processing' | 'complete';

export default function FreeIdentityVerification({ 
  userId, 
  onComplete, 
  onError 
}: FreeIdentityVerificationProps) {
  const [currentStep, setCurrentStep] = useState<VerificationStep>('intro');
  const [loading, setLoading] = useState(false);
  const [documentImage, setDocumentImage] = useState<string | null>(null);
  const [extractedData, setExtractedData] = useState<any>(null);
  const [verificationResult, setVerificationResult] = useState<any>(null);
  
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Document upload handler
  const handleDocumentUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Check file size (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      onError('File size must be less than 10MB');
      return;
    }

    // Check file type
    if (!file.type.startsWith('image/')) {
      onError('Please upload an image file');
      return;
    }

    setLoading(true);
    try {
      // Convert to base64
      const reader = new FileReader();
      reader.onload = async (e) => {
        const base64 = e.target?.result as string;
        setDocumentImage(base64);
        
        // Perform real-time verification
        await performRealTimeVerification(base64);
      };
      reader.readAsDataURL(file);
    } catch (error) {
      onError('Failed to process document');
      setLoading(false);
    }
  }, [onError]);

  // Real-time government ID verification
  const performRealTimeVerification = async (imageBase64: string) => {
    try {
      setCurrentStep('processing');
      
      // Call government ID verification API
      const response = await fetch('/api/verify-government-id', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId,
          documentImage: imageBase64,
          timestamp: new Date().toISOString()
        }),
      });

      if (!response.ok) {
        throw new Error('Government ID verification failed');
      }

      const result = await response.json();
      setVerificationResult(result);
      
      if (result.verified) {
        setCurrentStep('complete');
        setTimeout(() => {
          onComplete(result);
        }, 2000);
      } else {
        onError(result.message || 'ID verification failed');
        setCurrentStep('document');
      }
      
    } catch (error: any) {
      onError('Government ID verification failed: ' + error.message);
      setCurrentStep('document');
    } finally {
      setLoading(false);
    }
  };

  const renderIntroStep = () => (
    <div className="text-center">
      <div className="mb-6">
        <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
          üÜî
        </div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Government ID Verification</h2>
        <p className="text-gray-600">
          Verify your identity with a government-issued ID for secure trading on SafeTrade
        </p>
      </div>

      <div className="bg-green-50 rounded-lg p-4 mb-6">
        <h3 className="font-semibold text-green-900 mb-2">‚úÖ Real-time Government Verification</h3>
        <div className="text-sm text-green-800 space-y-1 text-left">
          <p>‚Ä¢ Upload driver's license, passport, or state ID</p>
          <p>‚Ä¢ Instant verification with government databases</p>
          <p>‚Ä¢ Bank-level security and encryption</p>
          <p>‚Ä¢ Data deleted after verification</p>
        </div>
      </div>

      <button
        onClick={() => setCurrentStep('document')}
        className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 transition-colors font-medium"
      >
        Start ID Verification
      </button>
      
      <p className="text-xs text-gray-500 mt-4">
        Powered by SafeTrade's secure verification system
      </p>
    </div>
  );

  const renderDocumentStep = () => (
    <div>
      <div className="text-center mb-6">
        <h3 className="text-xl font-semibold mb-2">Upload Government ID</h3>
        <p className="text-gray-600">
          Upload a clear photo of your driver's license, passport, or government-issued ID
        </p>
      </div>

      <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleDocumentUpload}
          className="hidden"
        />
        
        {!documentImage ? (
          <div>
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              üìÑ
            </div>
            <button
              onClick={() => fileInputRef.current?.click()}
              className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
              disabled={loading}
            >
              {loading ? 'Processing...' : 'Upload Government ID'}
            </button>
            <p className="text-sm text-gray-500 mt-2">
              Supports JPG, PNG (max 10MB)
            </p>
          </div>
        ) : (
          <div>
            <img 
              src={documentImage} 
              alt="Uploaded document" 
              className="max-w-full max-h-64 mx-auto rounded-lg"
            />
            <div className="mt-4">
              <p className="text-green-600 font-medium mb-2">‚úÖ Document uploaded successfully</p>
              <button
                onClick={() => {
                  setDocumentImage(null);
                  setExtractedData(null);
                }}
                className="bg-gray-500 text-white px-6 py-3 rounded-lg hover:bg-gray-600"
                disabled={loading}
              >
                Upload Different ID
              </button>
            </div>
          </div>
        )}
      </div>

      <div className="mt-6 bg-blue-50 rounded-lg p-4">
        <h4 className="font-medium text-blue-900 mb-2">üìã Accepted Documents:</h4>
        <ul className="text-sm text-blue-800 space-y-1">
          <li>‚Ä¢ Driver's License (front side)</li>
          <li>‚Ä¢ Passport (photo page)</li>
          <li>‚Ä¢ State ID Card</li>
          <li>‚Ä¢ National ID Card</li>
        </ul>
      </div>

      <div className="mt-4 bg-yellow-50 rounded-lg p-4">
        <h4 className="font-medium text-yellow-900 mb-2">üì∏ Photo Tips:</h4>
        <ul className="text-sm text-yellow-800 space-y-1">
          <li>‚Ä¢ Ensure all text is clearly visible</li>
          <li>‚Ä¢ Avoid glare and shadows</li>
          <li>‚Ä¢ Keep document flat and straight</li>
          <li>‚Ä¢ Use good lighting</li>
          <li>‚Ä¢ Make sure corners are visible</li>
        </ul>
      </div>
    </div>
  );

  const renderProcessingStep = () => (
    <div className="text-center">
      <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-6"></div>
      <h3 className="text-xl font-semibold mb-2">Verifying with Government Database</h3>
      <p className="text-gray-600 mb-4">
        Please wait while we verify your government ID in real-time...
      </p>
      
      <div className="bg-blue-50 rounded-lg p-4">
        <div className="text-sm text-blue-800 space-y-2">
          <p className="flex items-center">
            <span className="animate-pulse mr-2">üîç</span>
            Checking document authenticity...
          </p>
          <p className="flex items-center">
            <span className="animate-pulse mr-2">üèõÔ∏è</span>
            Verifying with government databases...
          </p>
          <p className="flex items-center">
            <span className="animate-pulse mr-2">üõ°Ô∏è</span>
            Performing security checks...
          </p>
        </div>
      </div>
      
      <p className="text-xs text-gray-500 mt-4">
        This process typically takes 10-30 seconds
      </p>
    </div>
  );

  const renderCompleteStep = () => (
    <div className="text-center">
      <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
        ‚úÖ
      </div>
      <h3 className="text-xl font-semibold text-green-800 mb-2">ID Verification Complete!</h3>
      <p className="text-gray-600 mb-4">
        Your government ID has been successfully verified. You can now access all SafeTrade features.
      </p>
      
      {verificationResult && (
        <div className="bg-green-50 rounded-lg p-4 text-left">
          <h4 className="font-medium text-green-900 mb-2">üìã Verification Details:</h4>
          <div className="text-sm text-green-800 space-y-1">
            <p>‚Ä¢ Document Type: Government ID</p>
            <p>‚Ä¢ Verification Status: ‚úÖ Verified</p>
            <p>‚Ä¢ Security Score: {verificationResult.score || 95}/100</p>
            <p>‚Ä¢ Verified: {new Date().toLocaleString()}</p>
          </div>
        </div>
      )}
    </div>
  );

  return (
    <div className="max-w-2xl mx-auto p-6">
      {/* Progress indicator - Simplified for 2 main steps */}
      <div className="flex items-center mb-8">
        {['intro', 'document', 'complete'].map((step, index) => {
          const stepNames = ['Start', 'Upload ID', 'Verified'];
          const currentIndex = currentStep === 'processing' ? 1 : ['intro', 'document', 'complete'].indexOf(currentStep);
          const isActive = index === currentIndex;
          const isCompleted = index < currentIndex;
          
          return (
            <React.Fragment key={step}>
              <div className={`flex items-center ${isActive ? 'text-blue-600' : isCompleted ? 'text-green-600' : 'text-gray-400'}`}>
                <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-sm font-medium ${
                  isActive 
                    ? 'border-blue-600 bg-blue-50' 
                    : isCompleted
                    ? 'border-green-600 bg-green-50'
                    : 'border-gray-200 bg-gray-50'
                }`}>
                  {isCompleted ? '‚úì' : index + 1}
                </div>
                <span className="ml-2 text-sm font-medium hidden sm:block">{stepNames[index]}</span>
              </div>
              {index < stepNames.length - 1 && (
                <div className="flex-1 h-0.5 bg-gray-200 mx-2"></div>
              )}
            </React.Fragment>
          );
        })}
      </div>

      {/* Step content */}
      {currentStep === 'intro' && renderIntroStep()}
      {currentStep === 'document' && renderDocumentStep()}
      {currentStep === 'processing' && renderProcessingStep()}
      {currentStep === 'complete' && renderCompleteStep()}
    </div>
  );
}
